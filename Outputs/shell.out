   1  function void shellsort {itg n, list (itg) l} [
              [0001, 0001] (0001,          DefFunction) {function}
              [0001, 0010] (0003,             TypeVoid) {void}
              [0001, 0015] (0000,        Identificator) {shellsort}
              [0001, 0025] (0010,            OpenBrace) {{}
              [0001, 0026] (0004,          TypeInteger) {itg}
              [0001, 0030] (0000,        Identificator) {n}
              [0001, 0031] (0025,          SignalComma) {,}
              [0001, 0033] (0009,             TypeList) {list}
              [0001, 0038] (0014,              OpenPar) {(}
              [0001, 0039] (0004,          TypeInteger) {itg}
              [0001, 0042] (0015,             ClosePar) {)}
              [0001, 0044] (0000,        Identificator) {l}
              [0001, 0045] (0011,           CloseBrace) {}}
              [0001, 0047] (0012,            OpenBrack) {[}
   2      itg h = 1;
              [0002, 0005] (0004,          TypeInteger) {itg}
              [0002, 0009] (0000,        Identificator) {h}
              [0002, 0011] (0040,      AtributionEqual) {=}
              [0002, 0013] (0051,             IntConst) {1}
              [0002, 0014] (0024,      SignalSemiColon) {;}
   3      while {h < n} [
              [0003, 0005] (0021,        ReservedWhile) {while}
              [0003, 0011] (0010,            OpenBrace) {{}
              [0003, 0012] (0000,        Identificator) {h}
              [0003, 0014] (0044,        RelationLower) {<}
              [0003, 0016] (0000,        Identificator) {n}
              [0003, 0017] (0011,           CloseBrace) {}}
              [0003, 0019] (0012,            OpenBrack) {[}
   4      	h = h * 3 + 1;
              [0004, 0006] (0000,        Identificator) {h}
              [0004, 0008] (0040,      AtributionEqual) {=}
              [0004, 0010] (0000,        Identificator) {h}
              [0004, 0012] (0028,        OperationMult) {*}
              [0004, 0014] (0051,             IntConst) {3}
              [0004, 0016] (0026,         OperationAdd) {+}
              [0004, 0018] (0051,             IntConst) {1}
              [0004, 0019] (0024,      SignalSemiColon) {;}
   5      ]
              [0005, 0005] (0013,           CloseBrack) {]}
   6      h = h / 3;
              [0006, 0005] (0000,        Identificator) {h}
              [0006, 0007] (0040,      AtributionEqual) {=}
              [0006, 0009] (0000,        Identificator) {h}
              [0006, 0011] (0029,         OperationDiv) {/}
              [0006, 0013] (0051,             IntConst) {3}
              [0006, 0014] (0024,      SignalSemiColon) {;}
   7      itg temp, j;
              [0007, 0005] (0004,          TypeInteger) {itg}
              [0007, 0009] (0000,        Identificator) {temp}
              [0007, 0013] (0025,          SignalComma) {,}
              [0007, 0015] (0000,        Identificator) {j}
              [0007, 0016] (0024,      SignalSemiColon) {;}
   8      while {h > 0} [
              [0008, 0005] (0021,        ReservedWhile) {while}
              [0008, 0011] (0010,            OpenBrace) {{}
              [0008, 0012] (0000,        Identificator) {h}
              [0008, 0014] (0043,      RelationGreater) {>}
              [0008, 0016] (0051,             IntConst) {0}
              [0008, 0017] (0011,           CloseBrace) {}}
              [0008, 0019] (0012,            OpenBrack) {[}
   9      	for {i = h; i < n; i++} [
              [0009, 0006] (0020,          ReservedFor) {for}
              [0009, 0010] (0010,            OpenBrace) {{}
              [0009, 0011] (0000,        Identificator) {i}
              [0009, 0013] (0040,      AtributionEqual) {=}
              [0009, 0015] (0000,        Identificator) {h}
              [0009, 0016] (0024,      SignalSemiColon) {;}
              [0009, 0018] (0000,        Identificator) {i}
              [0009, 0020] (0044,        RelationLower) {<}
              [0009, 0022] (0000,        Identificator) {n}
              [0009, 0023] (0024,      SignalSemiColon) {;}
              [0009, 0025] (0000,        Identificator) {i}
              [0009, 0026] (0030,         OperationInc) {++}
              [0009, 0028] (0011,           CloseBrace) {}}
              [0009, 0030] (0012,            OpenBrack) {[}
  10          	temp = l(i);
              [0010, 0010] (0000,        Identificator) {temp}
              [0010, 0015] (0040,      AtributionEqual) {=}
              [0010, 0017] (0000,        Identificator) {l}
              [0010, 0018] (0014,              OpenPar) {(}
              [0010, 0019] (0000,        Identificator) {i}
              [0010, 0020] (0015,             ClosePar) {)}
              [0010, 0021] (0024,      SignalSemiColon) {;}
  11              j = i;
              [0011, 0013] (0000,        Identificator) {j}
              [0011, 0015] (0040,      AtributionEqual) {=}
              [0011, 0017] (0000,        Identificator) {i}
              [0011, 0018] (0024,      SignalSemiColon) {;}
  12              while {j >= h and l(j - h) > temp} [
              [0012, 0013] (0021,        ReservedWhile) {while}
              [0012, 0019] (0010,            OpenBrace) {{}
              [0012, 0020] (0000,        Identificator) {j}
              [0012, 0022] (0045, RelationGreaterEqual) {>=}
              [0012, 0025] (0000,        Identificator) {h}
              [0012, 0027] (0037,             LogicAnd) {and}
              [0012, 0031] (0000,        Identificator) {l}
              [0012, 0032] (0014,              OpenPar) {(}
              [0012, 0033] (0000,        Identificator) {j}
              [0012, 0035] (0027,         OperationSub) {-}
              [0012, 0037] (0000,        Identificator) {h}
              [0012, 0038] (0015,             ClosePar) {)}
              [0012, 0040] (0043,      RelationGreater) {>}
              [0012, 0042] (0000,        Identificator) {temp}
              [0012, 0046] (0011,           CloseBrace) {}}
              [0012, 0048] (0012,            OpenBrack) {[}
  13              	l(j) = l(j - h);
              [0013, 0014] (0000,        Identificator) {l}
              [0013, 0015] (0014,              OpenPar) {(}
              [0013, 0016] (0000,        Identificator) {j}
              [0013, 0017] (0015,             ClosePar) {)}
              [0013, 0019] (0040,      AtributionEqual) {=}
              [0013, 0021] (0000,        Identificator) {l}
              [0013, 0022] (0014,              OpenPar) {(}
              [0013, 0023] (0000,        Identificator) {j}
              [0013, 0025] (0027,         OperationSub) {-}
              [0013, 0027] (0000,        Identificator) {h}
              [0013, 0028] (0015,             ClosePar) {)}
              [0013, 0029] (0024,      SignalSemiColon) {;}
  14                  j = j - h;
              [0014, 0017] (0000,        Identificator) {j}
              [0014, 0019] (0040,      AtributionEqual) {=}
              [0014, 0021] (0000,        Identificator) {j}
              [0014, 0023] (0027,         OperationSub) {-}
              [0014, 0025] (0000,        Identificator) {h}
              [0014, 0026] (0024,      SignalSemiColon) {;}
  15              ]
              [0015, 0013] (0013,           CloseBrack) {]}
  16              l(j) = temp ;
              [0016, 0013] (0000,        Identificator) {l}
              [0016, 0014] (0014,              OpenPar) {(}
              [0016, 0015] (0000,        Identificator) {j}
              [0016, 0016] (0015,             ClosePar) {)}
              [0016, 0018] (0040,      AtributionEqual) {=}
              [0016, 0020] (0000,        Identificator) {temp}
              [0016, 0025] (0024,      SignalSemiColon) {;}
  17          ]
              [0017, 0009] (0013,           CloseBrack) {]}
  18          h = h / 2 ;
              [0018, 0009] (0000,        Identificator) {h}
              [0018, 0011] (0040,      AtributionEqual) {=}
              [0018, 0013] (0000,        Identificator) {h}
              [0018, 0015] (0029,         OperationDiv) {/}
              [0018, 0017] (0051,             IntConst) {2}
              [0018, 0019] (0024,      SignalSemiColon) {;}
  19      ]
              [0019, 0005] (0013,           CloseBrack) {]}
  20  ]
              [0020, 0001] (0013,           CloseBrack) {]}
  21  function void main {} [
              [0021, 0001] (0001,          DefFunction) {function}
              [0021, 0010] (0003,             TypeVoid) {void}
              [0021, 0015] (0002,         ReservedMain) {main}
              [0021, 0020] (0010,            OpenBrace) {{}
              [0021, 0021] (0011,           CloseBrace) {}}
              [0021, 0023] (0012,            OpenBrack) {[}
  22      itg i;
              [0022, 0005] (0004,          TypeInteger) {itg}
              [0022, 0009] (0000,        Identificator) {i}
              [0022, 0010] (0024,      SignalSemiColon) {;}
  23      itg n;
              [0023, 0005] (0004,          TypeInteger) {itg}
              [0023, 0009] (0000,        Identificator) {n}
              [0023, 0010] (0024,      SignalSemiColon) {;}
  24      read{n};
              [0024, 0005] (0023,         ReservedRead) {read}
              [0024, 0009] (0010,            OpenBrace) {{}
              [0024, 0010] (0000,        Identificator) {n}
              [0024, 0011] (0011,           CloseBrace) {}}
              [0024, 0012] (0024,      SignalSemiColon) {;}
  25      list (itg) l;
              [0025, 0005] (0009,             TypeList) {list}
              [0025, 0010] (0014,              OpenPar) {(}
              [0025, 0011] (0004,          TypeInteger) {itg}
              [0025, 0014] (0015,             ClosePar) {)}
              [0025, 0016] (0000,        Identificator) {l}
              [0025, 0017] (0024,      SignalSemiColon) {;}
  26      for {i, 0, n, 1} [
              [0026, 0005] (0020,          ReservedFor) {for}
              [0026, 0009] (0010,            OpenBrace) {{}
              [0026, 0010] (0000,        Identificator) {i}
              [0026, 0011] (0025,          SignalComma) {,}
              [0026, 0013] (0051,             IntConst) {0}
              [0026, 0014] (0025,          SignalComma) {,}
              [0026, 0016] (0000,        Identificator) {n}
              [0026, 0017] (0025,          SignalComma) {,}
              [0026, 0019] (0051,             IntConst) {1}
              [0026, 0020] (0011,           CloseBrace) {}}
              [0026, 0022] (0012,            OpenBrack) {[}
  27          itg x;
              [0027, 0009] (0004,          TypeInteger) {itg}
              [0027, 0013] (0000,        Identificator) {x}
              [0027, 0014] (0024,      SignalSemiColon) {;}
  28          read{x};
              [0028, 0009] (0023,         ReservedRead) {read}
              [0028, 0013] (0010,            OpenBrace) {{}
              [0028, 0014] (0000,        Identificator) {x}
              [0028, 0015] (0011,           CloseBrace) {}}
              [0028, 0016] (0024,      SignalSemiColon) {;}
  29          l.append{x};
              [0029, 0009] (0000,        Identificator) {l}
              [0029, 0010] (0053,            SignalDot) {.}
              [0029, 0011] (0054,       ReservedAppend) {append}
              [0029, 0017] (0010,            OpenBrace) {{}
              [0029, 0018] (0000,        Identificator) {x}
              [0029, 0019] (0011,           CloseBrace) {}}
              [0029, 0020] (0024,      SignalSemiColon) {;}
  30      ]
              [0030, 0005] (0013,           CloseBrack) {]}
  31      shellsort{n, l};
              [0031, 0005] (0000,        Identificator) {shellsort}
              [0031, 0014] (0010,            OpenBrace) {{}
              [0031, 0015] (0000,        Identificator) {n}
              [0031, 0016] (0025,          SignalComma) {,}
              [0031, 0018] (0000,        Identificator) {l}
              [0031, 0019] (0011,           CloseBrace) {}}
              [0031, 0020] (0024,      SignalSemiColon) {;}
  32      for {i, 0, n}  [
              [0032, 0005] (0020,          ReservedFor) {for}
              [0032, 0009] (0010,            OpenBrace) {{}
              [0032, 0010] (0000,        Identificator) {i}
              [0032, 0011] (0025,          SignalComma) {,}
              [0032, 0013] (0051,             IntConst) {0}
              [0032, 0014] (0025,          SignalComma) {,}
              [0032, 0016] (0000,        Identificator) {n}
              [0032, 0017] (0011,           CloseBrace) {}}
              [0032, 0020] (0012,            OpenBrack) {[}
  33          write{l(i), " "};
              [0033, 0009] (0022,        ReservedWrite) {write}
              [0033, 0014] (0010,            OpenBrace) {{}
              [0033, 0015] (0000,        Identificator) {l}
              [0033, 0016] (0014,              OpenPar) {(}
              [0033, 0017] (0000,        Identificator) {i}
              [0033, 0018] (0015,             ClosePar) {)}
              [0033, 0019] (0025,          SignalComma) {,}
              [0033, 0021] (0049,          StringConst) {" "}
              [0033, 0024] (0011,           CloseBrace) {}}
              [0033, 0025] (0024,      SignalSemiColon) {;}
  34      ]
              [0034, 0005] (0013,           CloseBrack) {]}
  35  ]
              [0035, 0001] (0013,           CloseBrack) {]}
